{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { VisualElement } from '../../render/VisualElement.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nconst createObject = () => ({});\n\nclass StateVisualElement extends VisualElement {\n  build() {}\n\n  measureInstanceViewportBox() {\n    return createBox();\n  }\n\n  resetTransform() {}\n\n  restoreTransform() {}\n\n  removeValueFromRenderState() {}\n\n  renderInstance() {}\n\n  scrapeMotionValuesFromProps() {\n    return createObject();\n  }\n\n  getBaseTargetFromProps() {\n    return undefined;\n  }\n\n  readValueFromInstance(_state, key, options) {\n    return options.initialState[key] || 0;\n  }\n\n  sortInstanceNodePosition() {\n    return 0;\n  }\n\n}\n\nconst useVisualState = makeUseVisualState({\n  scrapeMotionValuesFromProps: createObject,\n  createRenderState: createObject\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */\n\nfunction useAnimatedState(initialState) {\n  const [animationState, setAnimationState] = useState(initialState);\n  const visualState = useVisualState({}, false);\n  const element = useConstant(() => {\n    return new StateVisualElement({\n      props: {},\n      visualState,\n      presenceContext: null\n    }, {\n      initialState\n    });\n  });\n  useEffect(() => {\n    element.mount({});\n    return () => element.unmount();\n  }, [element]);\n  useEffect(() => {\n    element.update({\n      onUpdate: v => {\n        setAnimationState({ ...v\n        });\n      }\n    }, null);\n  }, [setAnimationState, element]);\n  const startAnimation = useConstant(() => animationDefinition => {\n    return animateVisualElement(element, animationDefinition);\n  });\n  return [animationState, startAnimation];\n}\n\nexport { useAnimatedState };","map":null,"metadata":{},"sourceType":"module"}