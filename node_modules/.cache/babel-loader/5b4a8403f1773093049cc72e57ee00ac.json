{"ast":null,"code":"import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n  const eventName = isActive ? \"pointerenter\" : \"pointerleave\";\n  const callbackName = isActive ? \"onHoverStart\" : \"onHoverEnd\";\n\n  const handleEvent = (event, info) => {\n    if (event.pointerType === \"touch\" || isDragActive()) return;\n    const props = node.getProps();\n\n    if (node.animationState && props.whileHover) {\n      node.animationState.setActive(\"whileHover\", isActive);\n    }\n\n    const callback = props[callbackName];\n\n    if (callback) {\n      frame.postRender(() => callback(event, info));\n    }\n  };\n\n  return addPointerEvent(node.current, eventName, handleEvent, {\n    passive: !node.getProps()[callbackName]\n  });\n}\n\nclass HoverGesture extends Feature {\n  mount() {\n    this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n  }\n\n  unmount() {}\n\n}\n\nexport { HoverGesture };","map":null,"metadata":{},"sourceType":"module"}