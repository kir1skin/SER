{"ast":null,"code":"import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n  /**\n   * We dynamically generate the AnimationState manager as it contains a reference\n   * to the underlying animation library. We only want to load that if we load this,\n   * so people can optionally code split it out using the `m` component.\n   */\n  constructor(node) {\n    super(node);\n    node.animationState || (node.animationState = createAnimationState(node));\n  }\n\n  updateAnimationControlsSubscription() {\n    const {\n      animate\n    } = this.node.getProps();\n    this.unmount();\n\n    if (isAnimationControls(animate)) {\n      this.unmount = animate.subscribe(this.node);\n    }\n  }\n  /**\n   * Subscribe any provided AnimationControls to the component's VisualElement\n   */\n\n\n  mount() {\n    this.updateAnimationControlsSubscription();\n  }\n\n  update() {\n    const {\n      animate\n    } = this.node.getProps();\n    const {\n      animate: prevAnimate\n    } = this.node.prevProps || {};\n\n    if (animate !== prevAnimate) {\n      this.updateAnimationControlsSubscription();\n    }\n  }\n\n  unmount() {}\n\n}\n\nexport { AnimationFeature };","map":null,"metadata":{},"sourceType":"module"}