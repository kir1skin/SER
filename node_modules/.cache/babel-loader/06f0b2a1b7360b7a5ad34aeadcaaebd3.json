{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { appearAnimationStore } from './store.mjs';\nimport { appearStoreId } from './store-id.mjs';\nlet handoffFrameTime;\n\nfunction handoffOptimizedAppearAnimation(elementId, valueName,\n/**\n * Legacy arguments. This function is inlined as part of SSG so it can be there's\n * a version mismatch between the main included Motion and the inlined script.\n *\n * Remove in early 2024.\n */\n_value, frame) {\n  const optimisedValueName = transformProps.has(valueName) ? \"transform\" : valueName;\n  const storeId = appearStoreId(elementId, optimisedValueName);\n  const optimisedAnimation = appearAnimationStore.get(storeId);\n\n  if (!optimisedAnimation) {\n    return null;\n  }\n\n  const {\n    animation,\n    startTime\n  } = optimisedAnimation;\n\n  const cancelAnimation = () => {\n    appearAnimationStore.delete(storeId);\n\n    if (frame) {\n      /**\n       * If we've been provided the frameloop as an argument, use it to defer\n       * cancellation until keyframes of the subsequent animation have been resolved.\n       * This \"papers over\" a gap where the JS animations haven't rendered with\n       * the latest time after a potential heavy blocking workload.\n       * Otherwise cancel immediately.\n       *\n       * This is an optional dependency to deal with the fact that this inline\n       * script and the library can be version sharded, and there have been\n       * times when this isn't provided as an argument.\n       */\n      frame.render(() => frame.render(() => {\n        try {\n          animation.cancel();\n        } catch (error) {}\n      }));\n    } else {\n      try {\n        animation.cancel();\n      } catch (error) {}\n    }\n  };\n  /**\n   * If the startTime is null, this animation is the Paint Ready detection animation\n   * and we can cancel it immediately without handoff.\n   *\n   * Or if we've already handed off the animation then we're now interrupting it.\n   * In which case we need to cancel it.\n   */\n\n\n  if (startTime === null || window.HandoffComplete) {\n    cancelAnimation();\n    return null;\n  } else {\n    /**\n     * Otherwise we're handing off this animation to the main thread.\n     *\n     * Record the time of the first handoff. We call performance.now() once\n     * here and once in startOptimisedAnimation to ensure we're getting\n     * close to a frame-locked time. This keeps all animations in sync.\n     */\n    if (handoffFrameTime === undefined) {\n      handoffFrameTime = performance.now();\n    }\n    /**\n     * We use main thread timings vs those returned by Animation.currentTime as it\n     * can be the case, particularly in Firefox, that currentTime doesn't return\n     * an updated value for several frames, even as the animation plays smoothly via\n     * the GPU.\n     */\n\n\n    return handoffFrameTime - startTime || 0;\n  }\n}\n\nexport { handoffOptimizedAppearAnimation };","map":null,"metadata":{},"sourceType":"module"}