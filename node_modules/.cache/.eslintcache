[{"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\index.js":"1","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Home.js":"2","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Tasks.js":"3","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Stats.js":"4","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Ref.js":"5","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Boost.js":"6","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\ErrorCom.js":"7","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Plutos.js":"8","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\firebase.js":"9","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Animate.js":"10","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Footer.js":"11","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Spinner.js":"12","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\ClaimLeveler.js":"13","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Levels.js":"14","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\MilestoneRewards.js":"15","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Rewards.js":"16","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\TaskOne.js":"17","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\context\\userContext.js":"18"},{"size":1156,"mtime":1720319300000,"results":"19","hashOfConfig":"20"},{"size":1928,"mtime":1720265642000,"results":"21","hashOfConfig":"20"},{"size":9715,"mtime":1720265931000,"results":"22","hashOfConfig":"20"},{"size":3355,"mtime":1719806726000,"results":"23","hashOfConfig":"20"},{"size":5910,"mtime":1719829613000,"results":"24","hashOfConfig":"20"},{"size":38341,"mtime":1720243058000,"results":"25","hashOfConfig":"20"},{"size":2317,"mtime":1717777519000,"results":"26","hashOfConfig":"20"},{"size":15727,"mtime":1720265791000,"results":"27","hashOfConfig":"20"},{"size":685,"mtime":1720242084000,"results":"28","hashOfConfig":"20"},{"size":448,"mtime":1717557642000,"results":"29","hashOfConfig":"20"},{"size":3343,"mtime":1719903082000,"results":"30","hashOfConfig":"20"},{"size":432,"mtime":1717773047000,"results":"31","hashOfConfig":"20"},{"size":1959,"mtime":1717844894000,"results":"32","hashOfConfig":"20"},{"size":5757,"mtime":1719907642000,"results":"33","hashOfConfig":"20"},{"size":4652,"mtime":1719811127000,"results":"34","hashOfConfig":"20"},{"size":5221,"mtime":1719808121000,"results":"35","hashOfConfig":"20"},{"size":13554,"mtime":1720261236000,"results":"36","hashOfConfig":"20"},{"size":21198,"mtime":1720434449000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"179350m",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\index.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Home.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Tasks.js",["94","95"],["96","97","98"],"import React, { useEffect, useState } from 'react'\nimport Animate from '../Components/Animate';\nimport { Outlet } from 'react-router-dom';\nimport coinsmall from \"../images/coinsmall.webp\";\nimport taskbook from \"../images/taskbook.webp\";\nimport { MdOutlineKeyboardArrowRight } from 'react-icons/md';\nimport { db } from '../firebase';\nimport { doc, getDoc } from 'firebase/firestore';\nimport Spinner from '../Components/Spinner';\nimport TaskOne from '../Components/TaskOne';\nimport ClaimLeveler from '../Components/ClaimLeveler';\nimport Levels from '../Components/Levels';\nimport { IoCheckmarkSharp } from \"react-icons/io5\";\nimport congrats from \"../images/celebrate.gif\";\nimport { useUser } from '../context/userContext';\nimport MilestoneRewards from '../Components/MilestoneRewards';\nimport ReferralRewards from '../Components/Rewards';\n\n\nconst Tasks = () => {\n\n\n    \n\n    const {id, balance, refBonus, taskCompleted, level, setTaskCompleted, taskCompleted2, setTaskCompleted2} = useUser();\n      // eslint-disable-next-line\n    const [loading, setLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [showModal2, setShowModal2] = useState(false);\n      // eslint-disable-next-line\n    const [claimLevel, setClaimLevel] = useState(false);\n    const [showLevels, setShowLevels] = useState(false);\n    // eslint-disable-next-line\n    const [message, setMessage] = useState(\"\");\n    const taskID = \"task_3100\"; // Assign a unique ID to this task\n    const taskID2 = \"task_3000\"; // Assign a unique ID to this task\n\n\n  const [activeIndex, setActiveIndex] = useState(1);\n\n  \n\n  const handleMenu = (index) => {\n    setActiveIndex(index);\n  };\n\n\nconst taskOne = () => {\n    setShowModal(true)\n    document.getElementById(\"footermain\").style.zIndex = \"50\";\n}\n\nconst taskTwo = () => {\n    setShowModal2(true)\n    document.getElementById(\"footermain\").style.zIndex = \"50\";\n}\n\n  \n  useEffect(() => {\n\n\n  checkTaskCompletion(id, taskID).then((completed) => {\n    setTaskCompleted(completed);\n    if (completed) {\n        setMessage(\"\");\n    }\n});\n  checkTaskCompletion(id, taskID2).then((completed) => {\n    setTaskCompleted2(completed);\n    if (completed) {\n        setMessage(\"\");\n    }\n});\n\nconsole.log('my userid is:', id)\n\n        // eslint-disable-next-line\n}, []);\n\nconst checkTaskCompletion = async (id, taskId, taskId2) => {\n    try {\n        const userTaskDocRef = doc(db, 'userTasks', `${id}_${taskId}`);\n        const userTaskDocRef2 = doc(db, 'userTasks', `${id}_${taskId2}`);\n        const docSnap = await getDoc(userTaskDocRef, userTaskDocRef2);\n        if (docSnap.exists()) {\n            return docSnap.data().completed;\n        } else {\n            return false;\n        }\n    } catch (e) {\n        console.error('Error checking task completion: ', e);\n        return false;\n    }\n};\n\n\nconst levelsAction = () => {\n\n    setShowLevels(true);\n\n    document.getElementById(\"footermain\").style.zIndex = \"50\";\n\n  }\n\n  const formatNumber = (num) => {\n    if (num < 100000) {\n      return new Intl.NumberFormat().format(num).replace(/,/g, \" \");\n    } else if (num < 1000000) {\n      return new Intl.NumberFormat().format(num).replace(/,/g, \" \");\n    } else {\n      return (num / 1000000).toFixed(3).replace(\".\", \".\") + \" M\";\n    }\n  };\n\n\n  return (\n\n    <>\n\n    {loading ? (\n        <Spinner />\n      ) : (\n    <Animate>\n <div className='w-full justify-center flex-col space-y-3 px-5'>\n\n\n\n<div className='fixed top-0 left-0 right-0 pt-8 px-5'>\n\n\n    <div className=\"flex space-x-2 justify-center items-center relative\">\n    <div id=\"congrat\" className='opacity-0 invisible w-[80%] absolute pl-10 ease-in-out duration-500 transition-all'>\n        <img src={congrats} alt=\"congrats\" className=\"w-full\"/>\n        </div>\n        {/* <Congratulations showCongrats={showCongrats} setShowCongrats={setShowCongrats} /> */}\n              <div className=\"w-[50px] h-[50px]\">\n                <img src={coinsmall} className=\"w-full\" alt=\"coin\"/>\n              </div>\n              <h1 className=\"text-[#fff] text-[42px] font-extrabold\">\n              {formatNumber(balance + refBonus)}\n              </h1>\n            </div>\n            {/* <div className=\"w-full flex space-x-1 items-center justify-center\">\n              <img src={bronze} className=\"w-[30px] h-[30px] relative\" alt=\"bronze\"/>\n              <h2 className=\"text-[#9d99a9] text-[20px] font-medium\">Wood</h2>\n              <MdOutlineKeyboardArrowRight className=\"w-[20px] h-[20px] text-[#9d99a9] mt-[2px]\"/>\n            </div> */}\n\n            <div onClick={levelsAction} className=\"w-full flex ml-[6px] space-x-1 items-center justify-center\">\n                                <img src={level.imgUrl} className=\"w-[25px] relative\" alt=\"bronze\" />\n                                <h2 className=\"text-[#9d99a9] text-[20px] font-medium\">{level.name}</h2>\n                                <MdOutlineKeyboardArrowRight className=\"w-[20px] h-[20px] text-[#9d99a9] mt-[2px]\" />\n                            </div>\n\n\n            <div className='bg-borders w-full px-5 h-[1px] !mt-5 !mb-5'></div>\n            \n            <div className='w-full border-[1px] border-borders rounded-[10px] p-1 flex items-center'>\n\n                \n                <div onClick={() => handleMenu(1)} className={`${activeIndex === 1 ? 'bg-cards' : ''}  rounded-[6px] py-[12px] px-3 w-[33%] flex justify-center text-center items-center`}>\n                    Special\n                </div>\n\n                <div onClick={() => handleMenu(2)} className={`${activeIndex === 2 ? 'bg-cards' : ''}  rounded-[6px] py-[12px] px-3 w-[33%] flex justify-center text-center items-center`}>\n                    Leagues\n                </div>\n\n                <div onClick={() => handleMenu(3)} className={`${activeIndex === 3 ? 'bg-cards' : ''}  rounded-[6px] py-[12px] px-3 w-[33%] flex justify-center text-center items-center`}>\n                    Ref Tasks\n                </div>\n\n            </div>\n\n            </div>\n\n\n            <div className='!mt-[204px] w-full h-[60vh] flex flex-col'>\n\n            <div className={`${activeIndex === 1 ? 'flex' : 'hidden'} alltaskscontainer flex-col w-full space-y-2`}>\n\n                <div onClick={taskOne} className='bg-cards rounded-[10px] p-[14px] flex justify-between items-center'>\n\n                    <div className='flex flex-1 items-center space-x-2'>\n\n                        <div className=''>\n                            <img src={taskbook} alt=\"tasks\" className='w-[50px]'/>\n                        </div>\n                        <div className='flex flex-col space-y-1'>\n                            <span className='font-semibold'>\n                                Join Our Socials\n                            </span>\n                            <div className='flex items-center space-x-1'>\n                            <span className=\"w-[20px] h-[20px]\">\n                <img src={coinsmall} className=\"w-full\" alt=\"coin\"/>\n              </span>\n              <span className='font-medium'>\n                50 000\n              </span>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    {/*  */}\n\n                    <div className=''>\n                    {taskCompleted ? (\n                                    <>\n\n                    <IoCheckmarkSharp className=\"w-[20px] h-[20px] text-[#5bd173] mt-[2px]\"/>\n                                    </>\n                                    ) : (\n                                    \n                                    <>\n                      \n                    <MdOutlineKeyboardArrowRight className=\"w-[20px] h-[20px] text-[#e0e0e0] mt-[2px]\"/>\n                                    </>\n                                    )}\n\n                                    \n                    </div>\n\n                </div>\n\n                {/*  */}\n\n                <div className='bg-cards rounded-[10px] p-[14px] flex justify-between items-center'>\n\n<div className='flex flex-1 items-center space-x-2'>\n\n    <div className=''>\n        <img src={taskbook} alt=\"taskbook\" className='w-[50px]'/>\n    </div>\n    <div className='flex flex-col space-y-1'>\n        <span className='font-semibold'>\n            Subscribe To Community\n        </span>\n        <div className='flex items-center space-x-1'>\n        <span className=\"w-[20px] h-[20px]\">\n<img src={coinsmall} className=\"w-full\" alt=\"coin\"/>\n</span>\n<span className='font-medium'>\n100 000\n</span>\n        </div>\n    </div>\n\n</div>\n\n{/*  */}\n\n<div className=''>\n{taskCompleted2 ? (\n                                    <>\n\n                    <IoCheckmarkSharp className=\"w-[20px] h-[20px] text-[#5bd173] mt-[2px]\"/>\n                                    </>\n                                    ) : (\n                                    \n                                    <>\n                      \n                    <MdOutlineKeyboardArrowRight className=\"w-[20px] h-[20px] text-[#e0e0e0] mt-[2px]\"/>\n                                    </>\n                                    )}\n</div>\n\n</div>\n\n\n\n            </div>\n\n\n\n{/*  */}\n\n\n            <div className={`${activeIndex === 2 ? 'flex' : 'hidden'} alltaskscontainer flex-col w-full space-y-2`}>\n\n\n\n<MilestoneRewards/>\n\n\n\n</div>\n\n\n{/*  */}\n\n\n            <div className={`${activeIndex === 3 ? 'flex' : 'hidden'} alltaskscontainer flex-col w-full space-y-2`}>\n\n\n<ReferralRewards/>\n\n\n\n\n\n\n\n</div>\n\n</div>\n\n\n\n\n<TaskOne showModal={showModal} setShowModal={setShowModal} />\n<ClaimLeveler claimLevel={claimLevel} setClaimLevel={setClaimLevel} />\n<Levels showLevels={showLevels} setShowLevels={setShowLevels} />\n\n\n\n    </div>\n    <Outlet />\n    </Animate>\n      )}\n      </>\n  )\n}\n\nexport default Tasks","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Stats.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Ref.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Boost.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\ErrorCom.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\pages\\Plutos.js",["99"],["100","101","102","103","104","105","106","107"],"import React, { useState, useEffect, useRef } from 'react';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase'; // Adjust the path as needed\nimport styled, { keyframes } from \"styled-components\";\nimport { MdOutlineKeyboardArrowRight } from \"react-icons/md\";\nimport Animate from '../Components/Animate';\nimport Spinner from '../Components/Spinner';\nimport { useUser } from '../context/userContext';\nimport Levels from '../Components/Levels';\nimport flash from \"../images/flash.webp\";\nimport coinsmall from \"../images/coinsmall.webp\";\n\n\n\n\nconst slideUp = keyframes`\n  0% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  100% {\n    opacity: 0;\n    transform: translateY(-350px);\n  }\n`;\n\nconst SlideUpText = styled.div`\n  position: absolute;\n  animation: ${slideUp} 3s ease-out;\n  font-size: 2.1em;\n  color: #ffffffa6;\n  font-weight: 600;\n  left: ${({ x }) => x}px;\n  top: ${({ y }) => y}px;\n  pointer-events: none; /* To prevent any interaction */\n`;\n\nconst Container = styled.div`\n  position: relative;\n  display: inline-block;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Plutos = () => {\n\n  const imageRef = useRef(null);\n  const [clicks, setClicks] = useState([]);\n  const { balance, tapBalance, energy, battery, tapGuru, mainTap, setIsRefilling, refillIntervalRef, refillEnergy, setEnergy, tapValue, setTapBalance, setBalance, refBonus, level, loading } = useUser();\n\n  // eslint-disable-next-line\n  const [points, setPoints] = useState(0);\n    // eslint-disable-next-line\n  const [isDisabled, setIsDisabled] = useState(false);\n    // eslint-disable-next-line\n  const [openClaim, setOpenClaim] = useState(false);\n  // eslint-disable-next-line\n  const [congrats, setCongrats] = useState(false);\n    // eslint-disable-next-line\n  const [glowBooster, setGlowBooster] = useState(false);\n  const [showLevels, setShowLevels] = useState(false);\n  const debounceTimerRef = useRef(null);\n    // eslint-disable-next-line\n  const refillTimerRef = useRef(null);\n  const isUpdatingRef = useRef(false);\n  const accumulatedBalanceRef = useRef(balance);\n  const accumulatedEnergyRef = useRef(energy);\n  const accumulatedTapBalanceRef = useRef(tapBalance);\n  const refillTimeoutRef = useRef(null); // Add this line\n\n\n  function triggerHapticFeedback() {\n    const isAndroid = /Android/i.test(navigator.userAgent);\n    const isIOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);\n  \n    if (isIOS && window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {\n      window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');\n    } else if (isAndroid && 'vibrate' in navigator) {\n      // Use the vibration API on Android\n      navigator.vibrate(50); // Vibrate for 50ms\n    } else {\n      console.warn('Haptic feedback not supported on this device.');\n    }\n  }\n\n\n\n\n  const handleClick = (e) => {\n    triggerHapticFeedback();\n\n    if (energy <= 0 || isDisabled || isUpdatingRef.current) {\n      setGlowBooster(true); // Trigger glow effect if energy and points are 0\n      setTimeout(() => {\n        setGlowBooster(false); // Remove glow effect after 1 second\n      }, 300);\n      return; // Exit if no energy left or if clicks are disabled or if an update is in progress\n    }\n\n    const { offsetX, offsetY, target } = e.nativeEvent;\n    const { clientWidth, clientHeight } = target;\n\n    const horizontalMidpoint = clientWidth / 2;\n    const verticalMidpoint = clientHeight / 2;\n\n    const animationClass =\n      offsetX < horizontalMidpoint\n        ? 'wobble-left'\n        : offsetX > horizontalMidpoint\n        ? 'wobble-right'\n        : offsetY < verticalMidpoint\n        ? 'wobble-top'\n        : 'wobble-bottom';\n\n    // Remove previous animations\n    imageRef.current.classList.remove(\n      'wobble-top',\n      'wobble-bottom',\n      'wobble-left',\n      'wobble-right'\n    );\n\n    // Add the new animation class\n    imageRef.current.classList.add(animationClass);\n\n    // Remove the animation class after animation ends to allow re-animation on the same side\n    setTimeout(() => {\n      imageRef.current.classList.remove(animationClass);\n    }, 500); // duration should match the animation duration in CSS\n\n    // Increment the count\n    const rect = e.target.getBoundingClientRect();\n    const newClick = {\n      id: Date.now(), // Unique identifier\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    };\n\n    setClicks((prevClicks) => [...prevClicks, newClick]);\n\n    // Update state immediately for UI\n    setEnergy((prevEnergy) => {\n      const newEnergy = Math.max(prevEnergy - tapValue.value, 0); // Ensure energy does not drop below zero\n      accumulatedEnergyRef.current = newEnergy;\n      return newEnergy;\n    });\n\n    setPoints((prevPoints) => prevPoints + tapValue.value);\n\n    setBalance((prevBalance) => {\n      const newBalance = prevBalance + tapValue.value;\n      accumulatedBalanceRef.current = newBalance;\n      return newBalance;\n    });\n\n    setTapBalance((prevTapBalance) => {\n      const newTapBalance = prevTapBalance + tapValue.value;\n      accumulatedTapBalanceRef.current = newTapBalance;\n      return newTapBalance;\n    });\n\n    // Remove the click after the animation duration\n    setTimeout(() => {\n      setClicks((prevClicks) =>\n        prevClicks.filter((click) => click.id !== newClick.id)\n      );\n    }, 1000); // Match this duration with the animation duration\n\n    // Reset the debounce timer\n    clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = setTimeout(updateFirestore, 1000); // Adjust the delay as needed\n\n  // Reset the refill timer\n  clearInterval(refillIntervalRef.current); // Stop refilling while the user is active\n  setIsRefilling(false); // Set refilling state to false\n  clearTimeout(refillTimeoutRef.current);\n  refillTimeoutRef.current = setTimeout(() => {\n    if (energy < battery.energy) {\n      refillEnergy();\n    }\n  }, 1000); // Set the inactivity period to 3 seconds (adjust as needed)\n};\n  const handleClickGuru = (e) => {\n    triggerHapticFeedback();\n\n    if (energy <= 0 || isDisabled || isUpdatingRef.current) {\n      setGlowBooster(true); // Trigger glow effect if energy and points are 0\n      setTimeout(() => {\n        setGlowBooster(false); // Remove glow effect after 1 second\n      }, 300);\n      return; // Exit if no energy left or if clicks are disabled or if an update is in progress\n    }\n\n    const { offsetX, offsetY, target } = e.nativeEvent;\n    const { clientWidth, clientHeight } = target;\n\n    const horizontalMidpoint = clientWidth / 2;\n    const verticalMidpoint = clientHeight / 2;\n\n    const animationClass =\n      offsetX < horizontalMidpoint\n        ? 'wobble-left'\n        : offsetX > horizontalMidpoint\n        ? 'wobble-right'\n        : offsetY < verticalMidpoint\n        ? 'wobble-top'\n        : 'wobble-bottom';\n\n    // Remove previous animations\n    imageRef.current.classList.remove(\n      'wobble-top',\n      'wobble-bottom',\n      'wobble-left',\n      'wobble-right'\n    );\n\n    // Add the new animation class\n    imageRef.current.classList.add(animationClass);\n\n    // Remove the animation class after animation ends to allow re-animation on the same side\n    setTimeout(() => {\n      imageRef.current.classList.remove(animationClass);\n    }, 500); // duration should match the animation duration in CSS\n\n    // Increment the count\n    const rect = e.target.getBoundingClientRect();\n    const newClick = {\n      id: Date.now(), // Unique identifier\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    };\n\n    setClicks((prevClicks) => [...prevClicks, newClick]);\n\n    // Update state immediately for UI\n    setEnergy((prevEnergy) => {\n      const newEnergy = Math.max(prevEnergy - 0, 0); // Ensure energy does not drop below zero\n      accumulatedEnergyRef.current = newEnergy;\n      return newEnergy;\n    });\n\n    setPoints((prevPoints) => prevPoints + tapValue.value * 5);\n\n    setBalance((prevBalance) => {\n      const newBalance = prevBalance + tapValue.value * 5;\n      accumulatedBalanceRef.current = newBalance;\n      return newBalance;\n    });\n\n    setTapBalance((prevTapBalance) => {\n      const newTapBalance = prevTapBalance + tapValue.value * 5;\n      accumulatedTapBalanceRef.current = newTapBalance;\n      return newTapBalance;\n    });\n\n    // Remove the click after the animation duration\n    setTimeout(() => {\n      setClicks((prevClicks) =>\n        prevClicks.filter((click) => click.id !== newClick.id)\n      );\n    }, 1000); // Match this duration with the animation duration\n\n\n    // Reset the debounce timer\n    clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = setTimeout(updateFirestore, 1000); // Adjust the delay as needed\n\n  // Reset the refill timer\n  clearInterval(refillIntervalRef.current); // Stop refilling while the user is active\n  setIsRefilling(false); // Set refilling state to false\n  clearTimeout(refillTimeoutRef.current);\n  refillTimeoutRef.current = setTimeout(() => {\n    if (energy < battery.energy) {\n      refillEnergy();\n    }\n  }, 1000); // Set the inactivity period to 3 seconds (adjust as needed)\n};\n\n  const updateFirestore = async () => {\n    const telegramUser = window.Telegram.WebApp.initDataUnsafe?.user;\n    if (telegramUser) {\n      const { id: userId } = telegramUser;\n      const userRef = doc(db, 'telegramUsers', userId.toString());\n\n      // Set updating flag\n      isUpdatingRef.current = true;\n\n      try {\n        await updateDoc(userRef, {\n          balance: accumulatedBalanceRef.current,\n          energy: accumulatedEnergyRef.current,\n          tapBalance: accumulatedTapBalanceRef.current,\n        });\n\n        // No need to update state here as it is already updated immediately in handleClick\n\n        // Reset accumulated values to current state values\n        accumulatedBalanceRef.current = balance;\n        accumulatedEnergyRef.current = energy;\n        accumulatedTapBalanceRef.current = tapBalance;\n      } catch (error) {\n        console.error('Error updating balance and energy:', error);\n      } finally {\n        // Clear updating flag\n        isUpdatingRef.current = false;\n      }\n    }\n  };\n\n\n  \n  const energyPercentage = (energy / battery.energy) * 100;\n\n\n  // const handleClaim = async () => {\n  //   const telegramUser = window.Telegram.WebApp.initDataUnsafe?.user;\n  //   if (telegramUser) {\n  //     const { id: userId } = telegramUser;\n  //     const userRef = doc(db, 'telegramUsers', userId.toString());\n  //     try {\n  //       await updateDoc(userRef, {\n  //         balance: balance + points,\n  //         energy: energy,\n  //         tapBalance: tapBalance + points\n     \n  //       });\n  //       setBalance((prevBalance) => prevBalance + points);\n  //       setTapBalance((prevTapBalance) => prevTapBalance + points);\n  //       localStorage.setItem('energy', energy);\n\n  //       if (energy <= 0) {\n  //         setIsTimerVisible(true);\n  //       }\n  //       console.log('Points claimed successfully');\n  //     } catch (error) {\n  //       console.error('Error updating balance and energy:', error);\n  //     }\n  //   }\n  //   openClaimer();\n  // };\n\n\n\n  const formatNumber = (num) => {\n    if (num < 100000) {\n      return new Intl.NumberFormat().format(num).replace(/,/g, \" \");\n    } else if (num < 1000000) {\n      return new Intl.NumberFormat().format(num).replace(/,/g, \" \");\n    } else {\n      return (num / 1000000).toFixed(3).replace(\".\", \".\") + \" M\";\n    }\n  };\n\n      // // Remove the click after the animation duration\n      // setTimeout(() => {\n      //   setTapGuru(false);\n      //   setMainTap(true);\n      // }, 22000); // Match this duration with the animation duration\n  \n\n      \n\n  return (\n<>\n      {loading ? (\n        <Spinner />\n      ) : (\n  \n        <Animate>\n         <div className=\"w-full flex justify-center flex-col overflow-hidden\">\n          <div className=\"flex space-x-[2px] justify-center items-center\">\n            <div className=\"w-[50px] h-[50px]\">\n              <img src={coinsmall} className=\"w-full\" alt=\"coin\" />\n            </div>\n            <h1 className=\"text-[#fff] text-[42px] font-extrabold\">\n            {formatNumber(balance + refBonus)} <br/>\n          \n            </h1>\n          </div>\n      \n          <div\n          \n            className=\"w-full ml-[6px] flex space-x-1 items-center justify-center\"\n          >\n            <img\n              src={level.imgUrl}\n              className=\"w-[25px] relative\"\n              alt=\"bronze\"\n            />\n            <h2 onClick={() => setShowLevels(true)}className=\"text-[#9d99a9] text-[20px] font-medium\">\n            {level.name}\n            </h2>\n            <MdOutlineKeyboardArrowRight className=\"w-[20px] h-[20px] text-[#9d99a9] mt-[2px]\" />\n          </div>\n          <div className=\"w-full flex justify-center items-center pt-7 pb-24 relative\">\n\n          <div className=\"bg-[#efc26999] blur-[50px] absolute rotate-[35deg] w-[400px] h-[160px] top-10 -left-40 rounded-full\"></div>\n          <div class={`${tapGuru ? 'block' : 'hidden'} pyro`}>\n  <div class=\"before\"></div>\n  <div class=\"after\"></div>\n</div>\n            <div className=\"w-[350px] h-[350px] relative flex items-center justify-center\">\n            <img src='/lihgt.webp'\n                alt='err' className={`absolute w-[330px] rotate-45 ${tapGuru ? 'block' : 'hidden'}`}/>\n\n              <div className=\"image-container\">\n             {mainTap && (\n              <Container>\n                  <img\n                    onPointerDown={handleClick}\n                    ref={imageRef}\n                    src='/tapme1.webp'\n                    alt=\"Wobble\"\n                    className=\"wobble-image !w-[250px] select-none\"\n                  />\n                  {clicks.map((click) => (\n                    <SlideUpText key={click.id} x={click.x} y={click.y}>\n                      +{tapValue.value}\n                    </SlideUpText>\n                  ))}\n                </Container>\n             )}   \n             {tapGuru && (\n              <Container>\n\n                  <img\n                    onPointerDown={handleClickGuru}\n                    ref={imageRef}\n                    src='/tapme1.webp'\n                    alt=\"Wobble\"\n                    className=\"wobble-image !w-[250px] select-none\"\n                  />\n                  {clicks.map((click) => (\n                    <SlideUpText key={click.id} x={click.x} y={click.y}>\n                      +{tapValue.value * 5}\n                    </SlideUpText>\n                  ))}\n                </Container>\n             )}   \n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-col space-y-6 fixed bottom-[120px] left-0 right-0 justify-center items-center px-5\">\n            <div className=\"flex flex-col w-full items-center justify-center\">\n              <div className=\"flex pb-[6px] space-x-1 items-center justify-center text-[#fff]\">\n                <img alt=\"flash\" src={flash} className=\"w-[20px]\" />\n                <div className=\"\">\n                  <span className=\"text-[18px] font-bold\">{energy.toFixed(0)}</span>\n                  <span className=\"text-[14px] font-medium\">/ {battery.energy}</span>\n                </div>\n              </div>\n              <div className=\"flex w-full p-[4px] h-[20px] items-center bg-energybar rounded-[12px] border-[1px] border-borders2\">\n              <div\n          className=\"bg-[#e39725] h-full rounded-full transition-width duration-100\"\n          style={{ width: `${energyPercentage}%` }}\n        ></div>\n              </div>\n            </div>\n          </div>\n          <Levels showLevels={showLevels} setShowLevels={setShowLevels} />\n\n\n\n\n\n\n          </div>\n        </Animate>\n      )}\n</>\n  );\n};\n\n\nexport default Plutos;\n","C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\firebase.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Animate.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Footer.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Spinner.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\ClaimLeveler.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Levels.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\MilestoneRewards.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\Rewards.js",[],[],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\Components\\TaskOne.js",[],["108"],"C:\\Users\\User.DESKTOP-703GDSJ.000\\Desktop\\tapswapbotcodecomplete\\src\\context\\userContext.js",[],["109","110","111","112","113"],{"ruleId":"114","severity":1,"message":"115","line":29,"column":12,"nodeType":"116","messageId":"117","endLine":29,"endColumn":22},{"ruleId":"114","severity":1,"message":"118","line":53,"column":7,"nodeType":"116","messageId":"117","endLine":53,"endColumn":14},{"ruleId":"114","severity":1,"message":"119","line":27,"column":21,"nodeType":"116","messageId":"117","endLine":27,"endColumn":31,"suppressions":"120"},{"ruleId":"114","severity":1,"message":"121","line":34,"column":12,"nodeType":"116","messageId":"117","endLine":34,"endColumn":19,"suppressions":"122"},{"ruleId":"123","severity":1,"message":"124","line":78,"column":4,"nodeType":"125","endLine":78,"endColumn":6,"suggestions":"126","suppressions":"127"},{"ruleId":"114","severity":1,"message":"128","line":1,"column":27,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"129","line":53,"column":10,"nodeType":"116","messageId":"117","endLine":53,"endColumn":16,"suppressions":"130"},{"ruleId":"114","severity":1,"message":"131","line":55,"column":22,"nodeType":"116","messageId":"117","endLine":55,"endColumn":35,"suppressions":"132"},{"ruleId":"114","severity":1,"message":"133","line":57,"column":10,"nodeType":"116","messageId":"117","endLine":57,"endColumn":19,"suppressions":"134"},{"ruleId":"114","severity":1,"message":"135","line":57,"column":21,"nodeType":"116","messageId":"117","endLine":57,"endColumn":33,"suppressions":"136"},{"ruleId":"114","severity":1,"message":"137","line":59,"column":10,"nodeType":"116","messageId":"117","endLine":59,"endColumn":18,"suppressions":"138"},{"ruleId":"114","severity":1,"message":"139","line":59,"column":20,"nodeType":"116","messageId":"117","endLine":59,"endColumn":31,"suppressions":"140"},{"ruleId":"114","severity":1,"message":"141","line":61,"column":10,"nodeType":"116","messageId":"117","endLine":61,"endColumn":21,"suppressions":"142"},{"ruleId":"114","severity":1,"message":"143","line":65,"column":9,"nodeType":"116","messageId":"117","endLine":65,"endColumn":23,"suppressions":"144"},{"ruleId":"123","severity":1,"message":"145","line":66,"column":6,"nodeType":"125","endLine":66,"endColumn":8,"suggestions":"146","suppressions":"147"},{"ruleId":"123","severity":1,"message":"148","line":94,"column":6,"nodeType":"125","endLine":94,"endColumn":27,"suggestions":"149","suppressions":"150"},{"ruleId":"123","severity":1,"message":"151","line":339,"column":6,"nodeType":"125","endLine":339,"endColumn":8,"suggestions":"152","suppressions":"153"},{"ruleId":"123","severity":1,"message":"154","line":390,"column":6,"nodeType":"125","endLine":390,"endColumn":10,"suggestions":"155","suppressions":"156"},{"ruleId":"123","severity":1,"message":"157","line":546,"column":6,"nodeType":"125","endLine":546,"endColumn":10,"suggestions":"158","suppressions":"159"},{"ruleId":"123","severity":1,"message":"160","line":557,"column":6,"nodeType":"125","endLine":557,"endColumn":22,"suggestions":"161","suppressions":"162"},"no-unused-vars","'showModal2' is assigned a value but never used.","Identifier","unusedVar","'taskTwo' is assigned a value but never used.","'setLoading' is assigned a value but never used.",["163"],"'message' is assigned a value but never used.",["164"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'setTaskCompleted', and 'setTaskCompleted2'. Either include them or remove the dependency array.","ArrayExpression",["165"],["166"],"'useEffect' is defined but never used.","'points' is assigned a value but never used.",["167"],"'setIsDisabled' is assigned a value but never used.",["168"],"'openClaim' is assigned a value but never used.",["169"],"'setOpenClaim' is assigned a value but never used.",["170"],"'congrats' is assigned a value but never used.",["171"],"'setCongrats' is assigned a value but never used.",["172"],"'glowBooster' is assigned a value but never used.",["173"],"'refillTimerRef' is assigned a value but never used.",["174"],"React Hook useEffect has missing dependencies: 'id' and 'setTaskCompleted'. Either include them or remove the dependency array.",["175"],["176"],"React Hook useEffect has missing dependencies: 'refillEnergy' and 'refiller'. Either include them or remove the dependency array.",["177"],["178"],"React Hook useEffect has a missing dependency: 'sendUserData'. Either include it or remove the dependency array.",["179"],["180"],"React Hook useEffect has missing dependencies: 'defaultEnergy', 'incrementValue', 'refillDuration', 'refillEnergy', 'refillSteps', and 'refiller'. Either include them or remove the dependency array.",["181"],["182"],"React Hook useEffect has missing dependencies: 'checkAndUpdateFreeGuru' and 'checkAndUpdateFullTank'. Either include them or remove the dependency array.",["183"],["184"],"React Hook useEffect has a missing dependency: 'updateUserLevel'. Either include it or remove the dependency array.",["185"],["186"],{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"desc":"189","fix":"190"},{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"kind":"187","justification":"188"},{"desc":"191","fix":"192"},{"kind":"187","justification":"188"},{"desc":"193","fix":"194"},{"kind":"187","justification":"188"},{"desc":"195","fix":"196"},{"kind":"187","justification":"188"},{"desc":"197","fix":"198"},{"kind":"187","justification":"188"},{"desc":"199","fix":"200"},{"kind":"187","justification":"188"},{"desc":"201","fix":"202"},{"kind":"187","justification":"188"},"directive","","Update the dependencies array to be: [id, setTaskCompleted, setTaskCompleted2]",{"range":"203","text":"204"},"Update the dependencies array to be: [id, setTaskCompleted]",{"range":"205","text":"206"},"Update the dependencies array to be: [energy, isRefilling, refillEnergy, refiller]",{"range":"207","text":"208"},"Update the dependencies array to be: [sendUserData]",{"range":"209","text":"210"},"Update the dependencies array to be: [defaultEnergy, id, incrementValue, refillDuration, refillEnergy, refillSteps, refiller]",{"range":"211","text":"212"},"Update the dependencies array to be: [checkAndUpdateFreeGuru, checkAndUpdateFullTank, id]",{"range":"213","text":"214"},"Update the dependencies array to be: [tapBalance, id, updateUserLevel]",{"range":"215","text":"216"},[2295,2297],"[id, setTaskCompleted, setTaskCompleted2]",[2039,2041],"[id, setTaskCompleted]",[4357,4378],"[energy, isRefilling, refillEnergy, refiller]",[12519,12521],"[sendUserData]",[14513,14517],"[defaultEnergy, id, incrementValue, refillDuration, refillEnergy, refillSteps, refiller]",[19855,19859],"[checkAndUpdateFreeGuru, checkAndUpdateFullTank, id]",[19989,20005],"[tapBalance, id, updateUserLevel]"]